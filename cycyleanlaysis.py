# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1p0N-nMXHlBx2F1dgcSNDT7-6fyza6NrV
"""

# --- IMPORT LIBRARIES ---
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import chi2_contingency
import os

# --- LOAD NETFLIX DATA ---
netflix_df = pd.read_csv("netflix.csv", sep=None, engine="python")
netflix_df.columns = [c.strip().lower().replace(" ", "_") for c in netflix_df.columns]
netflix_df["date"] = pd.to_datetime(netflix_df["date"], dayfirst=True, errors="coerce")

# --- LOAD MENSTRUATION DATA ---
menstruation_df = pd.read_csv("menstruation_dates.csv", sep=";")
menstruation_df.columns = [c.strip().lower().replace(" ", "_") for c in menstruation_df.columns]
menstruation_df["starting_date"] = pd.to_datetime(menstruation_df["starting_date"], dayfirst=True)
menstruation_df["ending_date"] = pd.to_datetime(menstruation_df["ending_date"], dayfirst=True)

# --- DEFINE FUNCTION TO CHECK IF A DATE FALLS WITHIN MENSTRUATION ---
def is_during_menstruation(date, periods):
    for _, row in periods.iterrows():
        if row["starting_date"] <= date <= row["ending_date"]:
            return True
    return False

# --- APPLY MENSTRUATION STATUS TO NETFLIX DATA ---
netflix_df["during_menstruation"] = netflix_df["date"].apply(lambda d: is_during_menstruation(d, menstruation_df))

# --- SPLIT GENRES INTO SEPARATE ROWS ---
def explode_genres(df):
    df = df.copy()
    if "genres" not in df.columns:
        df["genres"] = ""
    df["genre_list"] = df["genres"].fillna("").apply(lambda x: [g.strip() for g in x.split(",")])
    return df.explode("genre_list")

df_menstrual = explode_genres(netflix_df[netflix_df["during_menstruation"]])
df_non_menstrual = explode_genres(netflix_df[~netflix_df["during_menstruation"]])

# --- COUNT GENRE OCCURRENCES ---
genres_menstrual = df_menstrual["genre_list"].value_counts().reset_index()
genres_non_menstrual = df_non_menstrual["genre_list"].value_counts().reset_index()
genres_menstrual.columns = ["Genre", "Menstrual Count"]
genres_non_menstrual.columns = ["Genre", "Non-Menstrual Count"]

# --- MERGE COUNTS AND FILL MISSING GENRES ---
genre_compare = pd.merge(genres_menstrual, genres_non_menstrual, on="Genre", how="outer").fillna(0)
genre_compare["Menstrual Count"] = genre_compare["Menstrual Count"].astype(int)
genre_compare["Non-Menstrual Count"] = genre_compare["Non-Menstrual Count"].astype(int)

# --- CHI-SQUARE TEST ON TOP 10 GENRES ---
top_genres = genre_compare.sort_values(by=["Menstrual Count", "Non-Menstrual Count"], ascending=False).head(10)
contingency = top_genres[["Menstrual Count", "Non-Menstrual Count"]].values
chi2, p_val, _, _ = chi2_contingency(contingency)

# --- PRINT CHI-SQUARE RESULTS ---
print("Chi-Square Statistic:", round(chi2, 2))
print("p-value:", p_val)

# --- CREATE FOLDER TO SAVE PLOTS ---
os.makedirs("plots", exist_ok=True)

# --- PLOT 1: GENRE BAR PLOT ---
genre_melted = pd.melt(genre_compare, id_vars="Genre",
                       value_vars=["Menstrual Count", "Non-Menstrual Count"],
                       var_name="Period", value_name="Count")
genre_melted = genre_melted[genre_melted["Genre"] != ""]

plt.figure(figsize=(12, 6))
sns.barplot(data=genre_melted, x="Genre", y="Count", hue="Period")
plt.title("Genre Preferences During and Outside Menstruation")
plt.xticks(rotation=45)
plt.tight_layout()
plt.savefig("plots/genre_comparison_barplot.png")
plt.close()

# --- PLOT 2: MONTHLY VIEWING LINE PLOT ---
netflix_df["month"] = netflix_df["date"].dt.to_period("M")
monthly_counts = netflix_df.groupby(["month", "during_menstruation"]).size().unstack(fill_value=0)
monthly_counts.index = monthly_counts.index.astype(str)

monthly_counts.plot(figsize=(12, 6), marker="o", linewidth=2)
plt.title("Monthly Viewing Trends: Menstruation vs Non-Menstruation")
plt.xlabel("Month")
plt.ylabel("Number of Viewings")
plt.xticks(rotation=45)
plt.tight_layout()
plt.savefig("plots/monthly_trends_lineplot.png")
plt.close()

# --- PLOT 3: DAILY VIEW COUNT BOXPLOT ---
watch_counts = netflix_df.groupby(["date", "during_menstruation"]).size().reset_index(name="view_count")
plt.figure(figsize=(8, 5))
sns.boxplot(data=watch_counts, x="during_menstruation", y="view_count")
plt.title("Daily View Count Distribution by Menstruation Status")
plt.xlabel("During Menstruation")
plt.ylabel("Views per Day")
plt.tight_layout()
plt.savefig("plots/view_count_boxplot.png")
plt.close()

"""# Yeni Bölüm"""